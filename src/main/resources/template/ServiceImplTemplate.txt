package @package@;

import com.github.pagehelper.PageHelper;
import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;

import javax.annotation.Resource;
import java.util.List;
import java.util.Objects;

/**
 * @MoName@Mo对应的ServiceImpl
 *
 * @author @d8Author@
 */
@Service
@Slf4j
public class @MoName@ServiceImpl implements @MoName@Service {

    @Resource
    private @MoName@Mapper @uncapitallizeMoName@Mapper;

    /**
     * 插入单条记录
     *
     * @param @uncapitallizeMoName@Mo
     * @return
     */
    @Override
    public int add(@MoName@Mo @uncapitallizeMoName@Mo) {
        @uncapitallizeMoName@Mo.setId(null);
        return @uncapitallizeMoName@Mapper.insertWithId(@uncapitallizeMoName@Mo);
    }

    /**
     * 批量插入
     *
     * @param @uncapitallizeMoName@MoList
     * @return
     */
    @Override
    public int batchAdd(List<@MoName@Mo> @uncapitallizeMoName@MoList) {
        @uncapitallizeMoName@MoList.forEach(item -> item.setId(null));
        return @uncapitallizeMoName@Mapper.insertBatchWithId(@uncapitallizeMoName@MoList);
    }

    /**
     * 查询列表, 如果携带分页参数则返回分页后的列表
     *
     * @param @uncapitallizeMoName@Mo
     * @param pageParams 可选分页参数
     * @return
     */
    @Override
    public List<@MoName@Mo> query@MoName@MoList(@MoName@Mo @uncapitallizeMoName@Mo, Integer... pageParams) {
        if (Objects.nonNull(pageParams) && pageParams.length > 0) {
            int pageNum = pageParams[0];
            int pageSize = pageParams.length > 1 ? pageParams[1] : 10;
            PageHelper.startPage(pageNum, pageSize);
        }
        return @uncapitallizeMoName@Mapper.query@MoName@MoList(@uncapitallizeMoName@Mo);
    }

    /**
     * 根据id更新非null字段
     *
     * @param @uncapitallizeMoName@Mo
     * @return
     */
    @Override
    public int updateSelectiveById(@MoName@Mo @uncapitallizeMoName@Mo) {
        return @uncapitallizeMoName@Mapper.updateByPrimaryKeySelective(@uncapitallizeMoName@Mo);
    }

    /**
     * 批量根据id更新非null字段
     *
     * @param @uncapitallizeMoName@MoList
     * @return
     */
    @Override
    public int batchUpdateSelectiveById(List<@MoName@Mo> @uncapitallizeMoName@MoList) {
        return @uncapitallizeMoName@Mapper.updateBatchByPrimaryKeySelective(@uncapitallizeMoName@MoList);
    }

    /**
     * 根据id物理删除
     *
     * @param id
     * @return
     */
    @Override
    public <T extends Number> int delete(T id) {
        return @uncapitallizeMoName@Mapper.deleteByPrimaryKey(id);
    }

}