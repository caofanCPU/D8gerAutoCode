package @controllerPackage@;

import @serviceInterfacePackage@.@MoName@Service;
import @moPackage@.@MoName@Mo;
import @swaggerMoPackage@.@MoName@Vo;
import com.alibaba.fastjson.JSONObject;
import com.github.pagehelper.PageInfo;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import com.github.xiaoymin.knife4j.annotations.ApiSort;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import javax.annotation.Resource;
import javax.validation.Valid;
import javax.validation.constraints.NotEmpty;
import java.util.ArrayList;
import java.util.List;

/**
 * @MoName@MoController
 *
 * @author @d8Author@
 */
@RestController
@Api(tags = {"@MoName@Mo-ModuleAPI"})
@ApiSort(0)
@Slf4j
public class @MoName@Controller {

    @Resource
    private @MoName@Service @uncapitallizeMoName@Service;

    @PostMapping(value = "@apiUrlPrefix@/@uncapitallizeMoName@Mo/add")
    @ApiOperationSupport(order = 1)
    @ApiOperation(value = "@MoName@Mo-AddRecord")
    public Object add(@Valid @RequestBody @MoName@Vo @uncapitallizeMoName@Vo) {
        // convert Vo to Mo
        @MoName@Mo @uncapitallizeMoName@Mo = JSONObject.parseObject(JSONObject.toJSONString(@uncapitallizeMoName@Vo), @MoName@Mo.class);
        @uncapitallizeMoName@Service.add(@uncapitallizeMoName@Mo);
        return @uncapitallizeMoName@Mo.getId();
    }

    @PostMapping(value = "@apiUrlPrefix@/@uncapitallizeMoName@Mo/batchAdd")
    @ApiOperationSupport(order = 2)
    @ApiOperation(value = "@MoName@Mo-BatchAddRecords")
    public Object batchAdd(@Valid @RequestBody List<@MoName@Vo> @uncapitallizeMoName@VoList) {
        List<@MoName@Mo> @uncapitallizeMoName@MoList = new ArrayList<>(@uncapitallizeMoName@VoList.size());
        for (@MoName@Vo @uncapitallizeMoName@Vo : @uncapitallizeMoName@VoList) {
            @uncapitallizeMoName@MoList.add(JSONObject.parseObject(JSONObject.toJSONString(@uncapitallizeMoName@Vo), @MoName@Mo.class));
        }
        return @uncapitallizeMoName@Service.batchAdd(@uncapitallizeMoName@MoList);
    }

    @PostMapping(value = "@apiUrlPrefix@/@uncapitallizeMoName@Mo/query@MoName@MoList")
    @ApiOperationSupport(order = 3)
    @ApiOperation(value = "@MoName@Mo-QueryList")
    public Object query@MoName@MoList(@Valid @RequestBody @MoName@Vo @uncapitallizeMoName@Vo) {
        // convert Vo to Mo
        @MoName@Mo @uncapitallizeMoName@Mo = JSONObject.parseObject(JSONObject.toJSONString(@uncapitallizeMoName@Vo), @MoName@Mo.class);
        return @uncapitallizeMoName@Service.query@MoName@MoList(@uncapitallizeMoName@Mo);
    }

    @PostMapping(value = "@apiUrlPrefix@/@uncapitallizeMoName@Mo/query@MoName@MoPage")
    @ApiOperationSupport(order = 4)
    @ApiOperation(value = "@MoName@Mo-QueryListWithPaging")
    public Object query@MoName@MoPage(@Valid @RequestBody @MoName@Vo @uncapitallizeMoName@Vo) {
        // convert Vo to Mo
        @MoName@Mo @uncapitallizeMoName@Mo = JSONObject.parseObject(JSONObject.toJSONString(@uncapitallizeMoName@Vo), @MoName@Mo.class);
        List<@MoName@Mo> result@MoName@MoList = @uncapitallizeMoName@Service.query@MoName@MoList(@uncapitallizeMoName@Mo, @uncapitallizeMoName@Vo.getPageNum(), @uncapitallizeMoName@Vo.getPageSize());
        return PageInfo.of(result@MoName@MoList);
    }

    @PostMapping(value = "@apiUrlPrefix@/@uncapitallizeMoName@Mo/update")
    @ApiOperationSupport(order = 5)
    @ApiOperation(value = "@MoName@Mo-UpdateRecord")
    public Object update(@Valid @RequestBody @MoName@Vo @uncapitallizeMoName@Vo) {
        // convert Vo to Mo
        @MoName@Mo @uncapitallizeMoName@Mo = JSONObject.parseObject(JSONObject.toJSONString(@uncapitallizeMoName@Vo), @MoName@Mo.class);
        return @uncapitallizeMoName@Service.updateSelectiveById(@uncapitallizeMoName@Mo);
    }

    @PostMapping(value = "@apiUrlPrefix@/@uncapitallizeMoName@Mo/batchUpdate")
    @ApiOperationSupport(order = 5)
    @ApiOperation(value = "@MoName@Mo-BatchUpdateRecords")
    public Object batchUpdate(@NotEmpty @RequestBody List<@MoName@Vo> @uncapitallizeMoName@VoList) {
        // convert Vo to Mo
        List<@MoName@Mo> @uncapitallizeMoName@List = new ArrayList<>(@uncapitallizeMoName@VoList.size());
        @uncapitallizeMoName@VoList.forEach(item -> @uncapitallizeMoName@List.add(JSONObject.parseObject(JSONObject.toJSONString(item), @MoName@Mo.class)));
        return @uncapitallizeMoName@Service.batchUpdateSelectiveById(@uncapitallizeMoName@List);
    }

    @PostMapping(value = "@apiUrlPrefix@/@uncapitallizeMoName@Mo/delete")
    @ApiOperationSupport(order = 6)
    @ApiOperation(value = "@MoName@Mo-DeleteRecord")
    public Object delete(@Valid @RequestBody @MoName@Vo @uncapitallizeMoName@Vo) {
        return @uncapitallizeMoName@Service.delete(@uncapitallizeMoName@Vo.getId());
    }


}
